#!/usr/bin/perl 
#
# This file is part of mpd-hora 
#
# This software is copyright (c) 2011 by kev.
# contact: kevatflujosdotorg
#
# This is free software; you can redistribute it and/or modify it under
# the same terms as the Perl 5 programming language system itself.
#
# http://dev.perl.org/licenses/

use strict;
use warnings;

use Audio::MPD;
use Encode; 
use Proc::Daemon;
use Getopt::Std;

my $mpdlib="/var/lib/mpd/music";
my $horabin="/usr/local/bin";
my $outfile = "$mpdlib/hora.spx";
# rest time between loops, if auto mode
my $rest = "200"; # 3.333 min, works for me!

my %opt=();
getopts("hdas:", \%opt);

&usage() if $opt{h};

if ($opt{s}){$rest = $opt{s}};

# initialize mpd object
my $mpd = Audio::MPD->new;
my $song = $mpd->collection->song( 'hora.spx' );
# daemonize
Proc::Daemon::Init unless $opt{d};

# loop forever
while (1) {
    if($opt{a})
    {
      &cue_hora; 
  
    } else {
      debug("_no_ agregar hora...\n");
    }
    debug("mpc idle ...\n");
    open(MPC,"mpc idle player |") || die "Failed: $!\n";
    for (<MPC>)
    {
	if ( /player/ ) 
	{ 
	    &spxcat($outfile);
            if ( $opt{a} ) {
    	        my $pid = fork();
     	        if ( $pid == -1 ) {
    	            die "failed to fork $!\n";
    	        } elsif ( $pid == 0 ) {
    	            &delete;
    	            exit; 
    	        } else { 
    	            waitpid($pid,0);	
    	        }	

	    }

	}
    }
    debug("dormir $rest segundos\n") if $opt{a};
    sleep($rest) if $opt{a};
}

sub spxcat
{
    debug("spxcat\n");
    my $pos = $mpd->current->pos;
    system ("spxcat $outfile") == 0 or die "Cannot open pipe to spxcat ($?): $!"
;
    sleep .7; # necesary to get mpd to register new file
    $mpd->play($pos);
}

sub delete {
    debug("modo automatico, aguanta al voz\n");
    sleep(10); 
    my @items = $mpd->playlist->as_items;
    my $pos = $mpd->current->pos;
    my $prev = $pos-1;
    if (  $items[$prev]->file eq 'hora.spx' ) {
        debug("quitar hora.spx de la lista\n");
        $mpd->playlist->delete($prev);
    }
}

sub get_time
{
    debug("formatear tiempo\n");
    my @timeData = localtime(time);
    my $min = $timeData[1];
    my $hour = $timeData[2];
    if($hour eq "0") {$hour = "12"};
    for ($hour, $min) {
       if(length($_) == 1){$_ = "0" . $_};
    }
    if ($min eq "00") 
    {
        $hour = $hour . "_0";
        $min = " ";
    }
    return ($hour, $min);
}

sub cue_hora 
{
    my @items = $mpd->playlist->as_items;
    my $pos = $mpd->current->pos;
    my $next = $pos+1;
    if ( $items[$next]->file eq 'hora.spx' || $items[$pos]->file eq 'hora.spx' )
    {
        debug("$song already in the cue, skip ...\n");
        return; 
    }
    debug("cue $song\n");
    $mpd->playlist->add( "$song" );
    debug("add $song to position: $pos\n");
    my $len = $#items+1;  
    $mpd->playlist->move($len, $next);
}

sub usage
{
    print <<EOS;

    Add hora.spx to playlist, and 
    wait until song change to play the time. 
    Make sure you have the audio files in place, 
    and mpd configured. 

    usar asi: $0 -[h|d|a] [-s n ]

     -h     : this (help) message
     -d     : depurar programa, no-daemonizar
     -s n   : number of seconds to wait between loops
     -a     : automatico, 'hora.spx' si agrega manualmente
	      a la lista por cada '-s' segundos.  

    example: $0 -s 200 

EOS
    exit; 
}

sub debug {
    return unless $opt{d};
    my ($msg) = @_;
    my ($s,$m,$h) = ( localtime(time) )[0,1,2,3,6];
    my $date = sprintf "%02d:%02d:%02d", $h, $m, $s;
    warn "$date $msg";
}
