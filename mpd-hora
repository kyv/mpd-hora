#!/usr/bin/perl 
#
# This file is part of mpd-hora 
#
# This software is copyright (c) 2011 by kev.
# contact: kevatflujosdotorg
#
# This is free software; you can redistribute it and/or modify it under
# the same terms as the Perl 5 programming language system itself.
#
# http://dev.perl.org/licenses/

use strict;
use warnings;

use Audio::MPD;
use Encode; 
use Proc::Daemon;
use Getopt::Std;

my %opt=();
getopts("hdms:", \%opt);

&usage() if $opt{h};

# rest time between loops
my $rest = "200"; # 3.333 min, works for me!
if ($opt{s}){$rest = $opt{s}};

# initialize mpd object
my $mpd = Audio::MPD->new;

# daemonize
Proc::Daemon::Init unless $opt{d};

# loop forever
while (1) {
    my $current;
    unless ($opt{m})
    {
      debug("cue hora...\n");
      unless ($opt{m} )
      {
          &cue_hora; 
      }
  
    } else {
      debug("_no_ agregar hora...\n");
    }
    debug("mpc idle ...\n");
    open(MPC,"mpc idle player |") || die "Failed: $!\n";
    for (<MPC>)
    {
	if ( /player/ ) 
	{ 
            debug("spxcat...\n");
	    &spxcat; 
	}
    }
    debug("dormir $rest segundos\n") unless $opt{m};
    sleep($rest) unless $opt{m};
}

sub spxcat
{
    $mpd->stop;
    my ($hour, $min) = &get_time;
    my $out_file = "/var/lib/mpd/hora/hora.spx";
    my $hour_file = "/var/lib/mpd/hora/HRS$hour.spx"; 
    my $min_file = "/var/lib/mpd/hora/MIN$min.spx"; 
    my $string; 
    if ($min ne " ")
    {
        $string = join(" ", ("/usr/local/bin/spxcat", $hour_file, $min_file, $out_file));
    } else { #hora en punto
        $string = join(" ", ("/bin/cp", $hour_file, $out_file));
    }
    debug("$string\n");
    system ("$string") == 0 or die "Cannot open pipe to spxcat ($?): $!";
    $mpd->play;
}

sub get_time
{
    debug("formatear tiempo\n");
    my @timeData = localtime(time);
    my $min = $timeData[1]; 
    my $hour = $timeData[2];
    if($hour eq "0") {$hour = "12"};
    for ($hour, $min) {
       if(length($_) == 1){$_ = "0" . $_};
    }
    if ($min eq "00") 
    {
        $hour = $hour . "_0";
        $min = " ";
    }
    return ($hour, $min);
}

sub cue_hora 
{
    my @items = $mpd->playlist->as_items;
    if ( $items[0]->file eq 'hora.spx' || $items[1]->file eq 'hora.spx' )
    {
        debug("hora.spx already in the cue, skip ...\n");
        return; 
    }
    $mpd->playlist->add( 'hora.spx' );
    my $len = $#items += 1;  
    $mpd->playlist->move($len, 1);
}

sub usage
{
    print <<EOS;

    Add hora.spx to playlist, and 
    wait until song change to play the time. 
    Make sure you have the audio files in place, 
    and mpd configured. 

    usar asi: $0 -[h|d|m] [-s n ]

     -h        : this (help) message
     -d     : depurar programa, no-daemonizar
     -s n   : number of seconds to wait between loops
     -m     : modo manual, hora.spx si agrega manualmente
	      a la lista por el usuario.  

    example: $0 -s 200 

EOS
    exit; 
}

sub debug {
    return unless $opt{d};
    my ($msg) = @_;
    my ($s,$m,$h) = ( localtime(time) )[0,1,2,3,6];
    my $date = sprintf "%02d:%02d:%02d", $h, $m, $s;
    warn "$date $msg";
}
